#=================================================
# https://github.com/wukongdaily/RunFilesBuilder
# Description: Build RunFiles using GitHub Actions
# Lisence: MIT
# Author: wukongdaily
# Blog: wkdaily.cpolar.top
#=================================================
name: Make PassWall2 run files

on:
  workflow_dispatch:
    inputs:
      package_version:
        description: '这里是包版本'
        required: false
        default: 'packages-24.10'

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Clone makeself repo
        run: |
          git clone https://github.com/megastep/makeself.git

      - name: Create directories for x86_64 and aarch64_generic and set PACKAGE_VERSION
        run: |
          mkdir -p x86_64/depends aarch64_generic/depends
          package_version="${{ github.event.inputs.package_version }}"
          if [ -z "$package_version" ]; then
            package_version="packages-24.10"
          fi
          echo "PACKAGE_VERSION=$package_version" >> $GITHUB_ENV


      - name: Download ipk files for x86_64 and aarch64_generic
        run: |
          echo "Get PACKAGE_VERSION=$PACKAGE_VERSION"

          FILE_PREFIXES=("luci-app-passwall2" "geoview" "hysteria" "naiveproxy" "shadowsocks-rust-sslocal" "shadowsocks-rust-ssserver" "shadowsocksr-libev-ssr-local" "shadowsocksr-libev-ssr-redir" "shadowsocksr-libev-ssr-server" "simple-obfs" "sing-box" "tcping" "tuic-client" "v2ray-geoip" "v2ray-geosite" "v2ray-plugin" "xray-core")
          EXCLUDE_PREFIXES=("luci-app-naiveproxy" "simple-obfs-client" "simple-obfs-server")

          BASE_URL_X86="https://dl.openwrt.ai/$PACKAGE_VERSION/x86_64/kiddin9/"
          echo "Fetching x86 directory page from $BASE_URL_X86"
          wget -qO- "$BASE_URL_X86" | \
          while IFS= read -r LINE; do
              for PREFIX in "${FILE_PREFIXES[@]}"; do
                  if [[ "$LINE" == *"$PREFIX"* ]]; then
                      FILE=$(echo "$LINE" | grep -oP 'href="\K[^"]*')
                      if [[ -z "$FILE" ]]; then
                          # echo "No file found in line, skipping"
                          continue
                      fi
                      exclude_file=false
                      for exclude_prefix in "${EXCLUDE_PREFIXES[@]}"; do
                          if [[ "$FILE" == $exclude_prefix* ]]; then
                              exclude_file=true
                              break
                          fi
                      done
                      if $exclude_file; then
                          echo "Skip file: $FILE"
                          continue
                      fi
                      FILE_URL="${BASE_URL_X86}${FILE}"
                      echo "Found file: $FILE_URL"
                      curl -L --fail "$FILE_URL" -o "x86_64/depends/$(basename $FILE_URL)" -#
                    fi
              done
          done

          BASE_URL_aarch64_generic="https://dl.openwrt.ai/$PACKAGE_VERSION/aarch64_generic/kiddin9/"
          echo "Fetching aarch64_generic directory page from $BASE_URL_aarch64_generic"
          wget -qO- "$BASE_URL_aarch64_generic" | \
          while IFS= read -r LINE; do
              for PREFIX in "${FILE_PREFIXES[@]}"; do
                  if [[ "$LINE" == *"$PREFIX"* ]]; then
                      FILE=$(echo "$LINE" | grep -oP 'href="\K[^"]*')
                      if [[ -z "$FILE" ]]; then
                          # echo "No file found in line, skipping"
                          continue
                      fi
                      exclude_file=false
                      for exclude_prefix in "${EXCLUDE_PREFIXES[@]}"; do
                          if [[ "$FILE" == $exclude_prefix* ]]; then
                              exclude_file=true
                              break
                          fi
                      done
                      if $exclude_file; then
                          echo "Skip file: $FILE"
                          continue
                      fi
                      FILE_URL="${BASE_URL_aarch64_generic}${FILE}"
                      echo "Found file: $FILE_URL"
                      curl -L --fail "$FILE_URL" -o "aarch64_generic/depends/$(basename $FILE_URL)" -#
                  fi
              done
          done

      - name: download sing-box for aarch64_generic form aarch64_generic dir
        run: |
          SINGBOX_PREFIXES=("sing-box")
          BASE_URL_aarch64_generic="https://dl.openwrt.ai/packages-24.10/aarch64_generic/kiddin9/"
          echo "for sing-box Fetching aarch64_generic directory page from $BASE_URL_aarch64_generic"
          wget -qO- "$BASE_URL_aarch64_generic" | \
          while IFS= read -r LINE; do
              for PREFIX in "${SINGBOX_PREFIXES[@]}"; do
                  if [[ "$LINE" == *"$PREFIX"* ]]; then
                      FILE=$(echo "$LINE" | grep -oP 'href="\K[^"]*')
                      if [[ -z "$FILE" ]]; then
                          # echo "No file found in line, skipping"
                          continue
                      fi
                      FILE_URL="${BASE_URL_aarch64_generic}${FILE}"
                      echo "Found file: $FILE_URL"
                      curl -L --fail "$FILE_URL" -o "aarch64_generic/depends/$(basename $FILE_URL)" -#
                  fi
              done
          done

      - name: mv pw2 to main dir
        run: |
          mv x86_64/depends/luci-app-passwall2*.ipk x86_64
          mv aarch64_generic/depends/luci-app-passwall2*.ipk aarch64_generic
          echo "List main dir ipk files for x86"
          ls x86_64
          echo "List main dir ipk files for aarch64_generic"
          ls aarch64_generic

      - name: downloads libopenssl3 & libudns ipk
        run: |
          echo "downloading libopenssl3 ipk"
          FILE_PREFIXES=("libopenssl3" "libudns")
          BASE_URL_X86="https://dl.openwrt.ai/$PACKAGE_VERSION/x86_64/base/"
          wget -qO- "$BASE_URL_X86" | \
          while IFS= read -r LINE; do
            for PREFIX in "${FILE_PREFIXES[@]}"; do
                if [[ "$LINE" == *"$PREFIX"* ]]; then
                    FILE=$(echo "$LINE" | grep -oP 'href="\K[^"]*')
                    if [[ -z "$FILE" ]]; then
                        # echo "No file found in line, skipping"
                        continue
                    fi
                    FILE_URL="${BASE_URL_X86}${FILE}"
                    echo "Found file: $FILE_URL"
                    curl -L --fail "$FILE_URL" -o "x86_64/depends/$(basename $FILE_URL)" -#
                  fi
            done
          done
          BASE_URL_aarch64_generic="https://dl.openwrt.ai/$PACKAGE_VERSION/aarch64_generic/base/"
          wget -qO- "$BASE_URL_aarch64_generic" | \
          while IFS= read -r LINE; do
              for PREFIX in "${FILE_PREFIXES[@]}"; do
                  if [[ "$LINE" == *"$PREFIX"* ]]; then
                      FILE=$(echo "$LINE" | grep -oP 'href="\K[^"]*')
                      if [[ -z "$FILE" ]]; then
                          # echo "No file found in line, skipping"
                          continue
                      fi
                      FILE_URL="${BASE_URL_aarch64_generic}${FILE}"
                      echo "Found file: $FILE_URL"
                      curl -L --fail "$FILE_URL" -o "aarch64_generic/depends/$(basename $FILE_URL)" -#
                    fi
              done
          done
          echo "downloading libudns ipk"
          BASE_URL_X86="https://dl.openwrt.ai/$PACKAGE_VERSION/x86_64/packages/"
          wget -qO- "$BASE_URL_X86" | \
          while IFS= read -r LINE; do
            for PREFIX in "${FILE_PREFIXES[@]}"; do
                if [[ "$LINE" == *"$PREFIX"* ]]; then
                    FILE=$(echo "$LINE" | grep -oP 'href="\K[^"]*')
                    if [[ -z "$FILE" ]]; then
                        # echo "No file found in line, skipping"
                        continue
                    fi
                    FILE_URL="${BASE_URL_X86}${FILE}"
                      echo "Found file: $FILE_URL"
                      curl -L --fail "$FILE_URL" -o "x86_64/depends/$(basename $FILE_URL)" -#
                fi
            done
          done
          BASE_URL_aarch64_generic="https://dl.openwrt.ai/$PACKAGE_VERSION/aarch64_generic/packages/"
          wget -qO- "$BASE_URL_aarch64_generic" | \
          while IFS= read -r LINE; do
            for PREFIX in "${FILE_PREFIXES[@]}"; do
                if [[ "$LINE" == *"$PREFIX"* ]]; then
                    FILE=$(echo "$LINE" | grep -oP 'href="\K[^"]*')
                    if [[ -z "$FILE" ]]; then
                        # echo "No file found in line, skipping"
                        continue
                    fi
                    FILE_URL="${BASE_URL_aarch64_generic}${FILE}"
                    echo "Found file: $FILE_URL"
                    curl -L --fail "$FILE_URL" -o "aarch64_generic/depends/$(basename $FILE_URL)" -#
                fi
            done
          done


      - name: List depends ipks
        run: |
          echo "List x86 depends ipk files"
          ls -lh x86_64/depends/
          echo "List aarch64_generic depends ipk files"
          ls -lh aarch64_generic/depends/


      - name: Create install.sh
        run: |
            echo -e "#!/bin/sh\n\nopkg update\nif [ \$? -ne 0 ]; then\n    echo \"update failed\"\n    exit 1\nfi\nopkg install depends/*.ipk --force-depends\nopkg install *.ipk --force-depends" > x86_64/install.sh
            chmod +x x86_64/install.sh
            cp x86_64/install.sh aarch64_generic/

      - name: Create self-extracting archives
        run: |
            mv -f x86_64 makeself
            mv -f aarch64_generic makeself
            cd makeself
            ipk_file=$(ls x86_64/*.ipk)
            appversion=$(basename "$ipk_file" | grep -oP '\d+\.\d+\.\d+')
            echo "APP_VERSION=$appversion" >> $GITHUB_ENV
            release_name=$(TZ="Asia/Shanghai" date +'%Y-%m-%d %H:%M Build')
            echo "RELEASE_NAME=$release_name" >> $GITHUB_ENV
            ./makeself.sh x86_64/ passwall2_x86_64_$appversion.run "by github action" ./install.sh
            ./makeself.sh aarch64_generic/ passwall2_aarch64_generic_$appversion.run "by github action" ./install.sh



      - name: Upload all .run files to GitHub Release
        uses: softprops/action-gh-release@v2.1.0
        with:
          tag_name: ${{ env.APP_VERSION }}
          name: "PassWall2-${{ env.APP_VERSION }}"
          body: "![Github](https://img.shields.io/badge/passwall2.run-123456?logo=github&logoColor=fff&labelColor=AB5ED8&style=for-the-badge) [![Github](https://img.shields.io/badge/国内加速站下载-FC7C0D?logo=github&logoColor=fff&labelColor=000&style=for-the-badge)](https://wkdaily.cpolar.top/archives/1) ![GitHub Downloads (all assets, specific tag)](https://img.shields.io/github/downloads/wukongdaily/RunFilesBuilder/${{ env.APP_VERSION }}/total?style=for-the-badge&labelColor=black&color=%2325c2a0)"
          files: makeself/*.run
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


